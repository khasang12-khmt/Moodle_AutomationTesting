# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDataParser:
    @staticmethod
    def parse_json(json_file):
        with open(json_file, 'r') as file:
            test_data = json.load(file)
        return test_data

class TestResponsive():
  def __init__(self, json_path):
    self.json_path = json_path
    self.first_run = True
    
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def perform_test(self, test_item):
    try:
      element_type = test_item['element_type']
      element_locator = test_item['element_locator']
      action = test_item['action']
      value = test_item['value']

      if action == 'click':
          self.driver.find_element(element_type, element_locator).click()
      elif action == 'input':
          self.driver.find_element(element_type, element_locator).send_keys(value)
      elif action == 'text_check':
          actual_text = self.driver.find_element(element_type, element_locator).text
          return actual_text == value
      elif action == 'wait':
          WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located((element_type, element_locator))).click()
      elif action == 'sleep':
          time.sleep(value)
      elif action == 'assert_check':
          elements = self.driver.find_elements(element_type, element_locator)
          return len(elements) > 0
      elif action == 'get':
          self.driver.get(value)
      elif action == 'set_window_size':
          width, height = map(int, value.split('x'))
          self.driver.set_window_size(width, height)

    except Exception as err:
        print(f"Unexpected {err=}, {type(err)=}")
        return False
    
  def test_responsive(self, width: int, height: int, is_mobile: bool):
    try:
      self.driver.get("https://school.moodledemo.net/")
      self.driver.set_window_size(width, height)
      self.driver.find_element(By.LINK_TEXT, "Log in").click()
      if self.first_run:
        self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
        self.driver.find_element(By.ID, "username").send_keys("")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("teacher")
        self.driver.find_element(By.ID, "password").click()
        self.first_run = False
      self.driver.find_element(By.ID, "password").send_keys("moodle")
      self.driver.find_element(By.ID, "loginbtn").click()
      
      self.driver.find_element(By.ID, "page-header").click()
      time.sleep(1)
      flag1 = self.driver.find_element(By.ID, "instance-472-header").text == "Course overview"
      
      if(is_mobile):
        self.driver.find_element(By.CSS_SELECTOR, ".navbar-toggler-icon").click()
        
      WebDriverWait(self.driver, 20).until(expected_conditions.presence_of_element_located((By.LINK_TEXT, "Dashboard"))).click()
      flag2 = self.driver.find_element(By.CSS_SELECTOR, ".h2").text == "Dashboard"   

      if (flag1 and flag2) is True:
        self.driver.find_element(By.ID, "user-menu-toggle").click(  )
        self.driver.find_element(By.LINK_TEXT, "Log out").click() 
        return True
      else: 
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
      return False
    except Exception as err:
      print(f"Unexpected {err=}, {type(err)=}")
      self.driver.find_element(By.ID, "user-menu-toggle").click()
      self.driver.find_element(By.LINK_TEXT, "Log out").click()
      return False
    
  def execute_test_data(self, test_data):
      result = []
      for scenario in test_data.values():
          url = scenario['url']
          test_items = scenario['test_items']

          # Initialize setup
          self.driver.get(url)

          flag1 = False
          flag2 = False
          for test_item in test_items:
              res = self.perform_test(test_item)
              if res is True: 
                if flag1 is True:
                  flag2 = True
                else:
                  flag1 = True
          result.append(flag1 and flag2)
      
      fail_test_name = []
      for i in range(0, len(result)):
          if not result[i]:
              fail_test_name.append(list(test_data.keys())[i])

      fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
      return f"""
      \n- Test Responsive (Level 2) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
      """

  def run(self):
      test_data = TestDataParser.parse_json(self.json_path)
      self.setup_method(None)
      result = self.execute_test_data(test_data)
      self.teardown_method(None)
      return result

print(TestResponsive("./input/input_Responsive.json").run())
