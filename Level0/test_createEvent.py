# Generated by Selenium IDE
import pytest
import time
import sys
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestCreateEvent():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}
    
    def teardown_method(self, method):
        self.driver.quit()
    
    def test_event1(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(924, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("T")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '7']").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event2(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(926, 804)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").clear()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            assert self.driver.find_element(By.ID, "id_error_name").text == "- Required"
            self.driver.find_element(By.XPATH, "//div[5]/div[2]/div/div/div/button/span").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event3(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(924, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '7']").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event4(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(1054, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '6']").click()
            self.driver.find_element(By.XPATH, "//a[contains(.,\'Show more...\')]").click()
            if not self.driver.find_element(By.ID, "id_duration_1").is_selected():
                self.driver.find_element(By.ID, "id_duration_1").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").send_keys("7")
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event5(self):
        flag = True
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(1054, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '6']").click()
            self.driver.find_element(By.XPATH, "//a[contains(.,\'Show more...\')]").click()
            if not self.driver.find_element(By.ID, "id_duration_1").is_selected():
                self.driver.find_element(By.ID, "id_duration_1").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").send_keys("5")
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            if self.driver.find_element(By.ID, "fgroup_id_error_durationgroup").text == "The date and time you selected for duration until is before the start time of the event. Please correct this before proceeding.":
                flag = True
            self.driver.find_element(By.CSS_SELECTOR, ".modal-header").click()
            self.driver.find_element(By.XPATH, "//div[5]/div[2]/div/div/div/button/span").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return flag
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event6(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(1054, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '7']").click()
            self.driver.find_element(By.XPATH, "//a[contains(.,\'Show more...\')]").click()
            if not self.driver.find_element(By.ID, "id_duration_1").is_selected():
                self.driver.find_element(By.ID, "id_duration_1").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").send_keys("7")
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event7(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(924, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '7']").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event8(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(1054, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            element = self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)")
            actions = ActionChains(self.driver)
            actions.move_to_element(element).perform()
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '7']").click()
            self.driver.find_element(By.XPATH, "//a[contains(.,\'Show more...\')]").click()
            if not self.driver.find_element(By.ID, "id_duration_1").is_selected():
                self.driver.find_element(By.ID, "id_duration_1").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").send_keys("8")
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event9(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(1054, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            element = self.driver.find_element(By.ID, "id_timestart_calendar")
            actions = ActionChains(self.driver)
            actions.move_to_element(element).perform()
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '31']").click()
            self.driver.find_element(By.ID, "id_timestart_month").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_month")
            dropdown.find_element(By.XPATH, "//option[. = 'February']").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
    def test_event10(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://sandbox.moodledemo.net/")
            self.driver.set_window_size(1054, 802)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").clear()
            self.driver.find_element(By.ID, "username").send_keys("student")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("sandbox")
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Calendar").click()
            self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").send_keys("Test Event")
            self.driver.find_element(By.ID, "id_timestart_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timestart_day")
            dropdown.find_element(By.XPATH, "//option[. = '6']").click()
            self.driver.find_element(By.LINK_TEXT, "Show more...").click()
            self.driver.find_element(By.CSS_SELECTOR, ".form-check-inline:nth-child(4)").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_day").send_keys("31")
            self.driver.find_element(By.ID, "id_timedurationuntil_month").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_month").send_keys("February']")
            self.driver.find_element(By.ID, "id_timedurationuntil_year").click()
            self.driver.find_element(By.ID, "id_timedurationuntil_year").send_keys("2024")
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
  
    def test(self, *test_list):
        result = []
        for test in test_list:
            result.append(test())
        fail_test_name = []
        for i in range(0, len(result)):
            if not result[i]:
                fail_test_name.append(test_list[i].__name__)

        fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
        return f"""
        \n- Test create event (Level 0)--\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """
        
    def run(self):

        self.setup_method(None)

        result = self.test(
        self.test_event1,
        self.test_event2,
        self.test_event3,
        self.test_event4,
        self.test_event5,
        self.test_event6,
        self.test_event7,
        self.test_event8,
        self.test_event9,
        self.test_event10
        )

        self.teardown_method(None)

        return result

createEvent = TestCreateEvent()
print(createEvent.run())