# Generated by Selenium IDE
import pytest
import time
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC

class TestEditTimeAndDoQuiz():
    
    def __init__(self):
        self.first_run = True;
    
    def setup_method(self, method):
        options = webdriver.ChromeOptions()
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        self.driver = webdriver.Chrome(options=options)
  
    def teardown_method(self, method):
        self.driver.quit()
    
    def precondition(self):
        self.driver.get("https://school.moodledemo.net/")
        self.driver.set_window_size(1056, 804)
        self.driver.find_element(By.LINK_TEXT, "Log in").click()
        if self.first_run:
            self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
            self.driver.find_element(By.ID, "username").send_keys("")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").send_keys("teacher")
            self.driver.find_element(By.ID, "password").click()
            self.first_run = False
        self.driver.find_element(By.ID, "password").send_keys("moodle")
        self.driver.find_element(By.ID, "loginbtn").click()
        time.sleep(5)
    
    def logout(self):
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
        time.sleep(5)

    
    def test_1(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("1")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test_2(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("15")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test_3(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.LINK_TEXT, "id_timelimit_enabled")
            if not enableItem.checked:
                self.logout()
                return True
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("0")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
    
    def test_4(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("abc2yugwvywuwyv22vw727wg9w82g92g929g29g29gg")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
    
    def test_5(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("@121232434343434343")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test_6(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("INSERT malware to db.quiz")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
    
    def test_7(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("99999999999999999999999999999999")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test_8(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("-100000000000000000000000")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test_9(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("+100000000000000000000000")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
    
    def test_10(self):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.precondition()
            self.driver.find_element(By.XPATH, "//div[3]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "Settings").click()
            time.sleep(5)
            self.driver.find_element(By.ID, "collapseElement-1").click()
            time.sleep(5)
            enableItem = self.driver.find_element(By.ID, "id_timelimit_enabled")
            if enableItem.is_selected() == False:
                enableItem.click()
            elements = self.driver.find_element(By.ID, "id_timelimit_number")
            if elements:
                self.driver.find_element(By.ID, "id_timelimit_number").click()
                self.driver.find_element(By.ID, "id_timelimit_number").send_keys("#$%^&(*)#^&(*()><?:?{@!#$")
                self.driver.find_element(By.ID, "id_submitbutton2").click()
                time.sleep(5)
                self.logout()
                return True
            else:
                self.logout()
                return False
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
    
    def test(self, *test_list):
        result = []
        for test in test_list:
            result.append(test())
        fail_test_name = []
        for i in range(0, len(result)):
            if not result[i]:
                fail_test_name.append(test_list[i].__name__)

        fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
        return f"""
        \n- Test Edit Time To Quiz (Level 0)--\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """

    def run(self):
        self.setup_method(None)
        result = self.test(
            self.test_1,
            self.test_2,
            self.test_3,
            self.test_4,
            self.test_5,
            self.test_6,
            self.test_7,
            self.test_8,
            self.test_9,
            self.test_10,
        )
        self.teardown_method(None)
        return result
    
    
    
     
editTimeAndDoQuiz = TestEditTimeAndDoQuiz()
print(editTimeAndDoQuiz.run())
  


  
