# Generated by Selenium IDE
import pytest
import time
import json
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC

class TestEditTimeAndDoQuiz():
    def __init__(self, data):
        self.data = data
        
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}
  
    def teardown_method(self, method):
        self.driver.quit()
        
    def test(self, test_dict: dict):
        result = []
        for name, test in test_dict.items():
            print(name)
            result.append(self.testEditTimeAndDoQuiz(test["limitTime"]))
        fail_test_name = []
        for i in range(0, len(result)):
            if not result[i]:
                fail_test_name.append(list(test_dict.keys())[i])

        fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
        return f"""
        \n- Test Edit Time And Do Quiz (Level 1) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """
    
    def run(self):
        self.setup_method(None)
        result = self.test(data)
        self.teardown_method(None)
        return result
    
    def testEditTimeAndDoQuiz(self, limitTime):
        print(sys._getframe(0).f_code.co_name)
        try:
            self.driver.get("https://school.moodledemo.net/")
            self.driver.set_window_size(790, 816)
            self.driver.find_element(By.LINK_TEXT, "Log in").click()
            self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").send_keys("teacher")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "password").send_keys("moodle")
            self.driver.find_element(By.ID, "loginbtn").click()
            time.sleep(3)
            self.driver.find_element(By.CSS_SELECTOR, ".searchbar input.form-control").click();
            self.driver.find_element(By.CSS_SELECTOR, ".searchbar input.form-control").send_keys("mind")
            self.driver.find_element(By.CSS_SELECTOR, ".searchbar input.form-control").send_keys(Keys.ENTER)
            time.sleep(3)
            self.driver.find_element(By.XPATH, "//span[3]").click()
            self.driver.find_element(By.CSS_SELECTOR, ".modtype_quiz .aalink").click()
            self.driver.find_element(By.CSS_SELECTOR, ".nav-tabs > li:nth-child(2) > a").click()
            self.driver.execute_script("window.scrollTo(0,391)")
            self.driver.find_element(By.ID, "collapseElement-1").click()
            self.driver.find_element(By.ID, "id_timelimit_number").click()
            self.driver.find_element(By.ID, "id_timelimit_number").send_keys(limitTime)
            time.sleep(3)
            self.driver.execute_script("window.scrollTo(200,200)")
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(2)").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            time.sleep(3)
            self.driver.find_element(By.CSS_SELECTOR, ".moodle-dialogue .btn-primary").click()
            self.driver.execute_script("window.scrollTo(222,222)")
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            self.driver.execute_script("window.scrollTo(100,100)")
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            time.sleep(3)
            self.driver.find_element(By.CSS_SELECTOR, ".modal-footer > button:nth-child(2)").click()
            time.sleep(5)
            return True
        
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
    
        
with open('./input/input_editTimeAndDoQuiz.json', encoding='UTF-8') as f:
    data = json.load(f)
    test_CreateDiscussion_DataDriven = TestEditTimeAndDoQuiz(data)
    print(test_CreateDiscussion_DataDriven.run())
  


  
