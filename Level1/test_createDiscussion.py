# Generated by Selenium IDE
import pytest
import time
import json
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from BaseTestSuite import BaseTestSuite
from TestRunner import TestRunner

class TestCreateDiscussionSuite(BaseTestSuite):    
  def logout(self):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    
  def test_discussion(self, test):
    try:
      subject, description, tag, expected_locator, expected_value = test["subject"], test["description"], test["tag"], test["expected_locator"], test["expected_value"]
      self.driver.get("https://school.moodledemo.net/")
      self.driver.set_window_size(790, 816)
      self.driver.find_element(By.LINK_TEXT, "Log in").click()
      if self.first_run:
        self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
        self.driver.find_element(By.ID, "username").send_keys("")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("teacher")
        self.driver.find_element(By.ID, "password").click()
        self.first_run = False
      self.driver.find_element(By.ID, "password").send_keys("moodle")
      self.driver.find_element(By.ID, "loginbtn").click()
      time.sleep(3)
      self.driver.find_element(By.XPATH, "//span[3]").click()
      self.driver.find_element(By.CSS_SELECTOR, "#module-967 .aalink").click()
      self.driver.find_element(By.LINK_TEXT, "Add discussion topic").click()
      time.sleep(3)
      
      # subject
      self.driver.find_element(By.ID, "id_subject").click()
      self.driver.find_element(By.ID, "id_subject").send_keys(subject)
      
      # description
      WebDriverWait(self.driver,10).until(expected_conditions.frame_to_be_available_and_switch_to_it("id_message_ifr"))
      element = self.driver.find_element(By.ID, "tinymce")
      self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>" + description + "</p>'}", element)
      self.driver.switch_to.default_content()
      
      # tag
      if tag != "":
        self.driver.find_element(By.ID, "id_advancedadddiscussion").click()
        self.driver.find_element(By.ID, "collapseElement-2").click()
        time.sleep(3)
        self.driver.find_element(By.XPATH, "//div[3]/input").click()
        self.driver.find_element(By.XPATH, "//div[3]/input").send_keys(tag)
      
      # submit
      self.driver.find_element(By.ID, "id_submitbutton").click()
      
      assertExp = False
      if expected_locator == "user-notifications":
        elements = self.driver.find_elements(By.ID, expected_locator)
        assertExp = len(elements) > 0
      elif expected_locator in ["id_error_subject", "id_error_message"]:
        assertExp = self.driver.find_element(By.ID, expected_locator).text == expected_value
      else:
        raise ValueError("Not Implemented")
      if assertExp:
        self.logout()
        return True
      else:
        self.logout()
      return False     
    except Exception as err:
      print(f"Unexpected {err=}, {type(err)=}")
      self.logout()
      return False
  
createDiscussionTestSuite = TestCreateDiscussionSuite('./input/input_CreateDiscussion.json')
TestRunner.run(createDiscussionTestSuite,"Create Discussion To Course")