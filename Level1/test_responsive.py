# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestResponsive():
  def __init__(self, data):
    self.data = data
    self.first_run = True
    
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  def logout(self):
    self.driver.find_element(By.ID, "user-menu-toggle").click()
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    
  def test_responsive(self, width: int, height: int, is_mobile: bool):
    try:
      self.driver.get("https://school.moodledemo.net/")
      self.driver.set_window_size(width, height)
      self.driver.find_element(By.LINK_TEXT, "Log in").click()
      if self.first_run:
        self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
        self.driver.find_element(By.ID, "username").send_keys("")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("teacher")
        self.driver.find_element(By.ID, "password").click()
        self.first_run = False
      self.driver.find_element(By.ID, "password").send_keys("moodle")
      self.driver.find_element(By.ID, "loginbtn").click()
      
      self.driver.find_element(By.ID, "page-header").click()
      time.sleep(1)
      flag1 = self.driver.find_element(By.ID, "instance-472-header").text == "Course overview"
      
      if(is_mobile):
        self.driver.find_element(By.CSS_SELECTOR, ".navbar-toggler-icon").click()
        
      WebDriverWait(self.driver, 20).until(expected_conditions.presence_of_element_located((By.LINK_TEXT, "Dashboard"))).click()
      flag2 = self.driver.find_element(By.CSS_SELECTOR, ".h2").text == "Dashboard"   

      if (flag1 and flag2) is True:
        self.driver.find_element(By.ID, "user-menu-toggle").click(  )
        self.driver.find_element(By.LINK_TEXT, "Log out").click() 
        return True
      else: 
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
      return False
    except Exception as err:
      print(f"Unexpected {err=}, {type(err)=}")
      self.driver.find_element(By.ID, "user-menu-toggle").click()
      self.driver.find_element(By.LINK_TEXT, "Log out").click()
      return False
    
  def test(self, test_dict: dict):
    result = []
    for name, test in test_dict.items():
        print(name)
        result.append(self.test_responsive(test["width"],test["height"],test["is_mobile"]))
    fail_test_name = []
    for i in range(0, len(result)):
        if not result[i]:
            fail_test_name.append(list(test_dict.keys())[i])

    fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
    return f"""
    \n- Test Create Discussion To Course (Level 1) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
    """
    
  def run(self):

    self.setup_method(None)
    result = self.test(data)
    self.teardown_method(None)
    return result
  
with open('./input/input_Responsive.json', encoding='UTF-8') as f:
    data = json.load(f)
    test_Responsive_DataDriven = TestResponsive(data)
    print(test_Responsive_DataDriven.run())
