# Generated by Selenium IDE
import pytest
import time
import json
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC

class TestDoQuiz():
    def __init__(self, data):
        self.first_run = True;
        self.data = data
    
    def setup_method(self, method):
        options = webdriver.ChromeOptions()
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        self.driver = webdriver.Chrome(options=options)
  
    def teardown_method(self, method):
        self.driver.quit()
        
    def precondition(self):
        self.driver.get("https://school.moodledemo.net/")
        self.driver.set_window_size(1056, 804)
        self.driver.find_element(By.LINK_TEXT, "Log in").click()
        if self.first_run:
            self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
            self.driver.find_element(By.ID, "username").send_keys("")
            self.driver.find_element(By.ID, "password").click()
            self.driver.find_element(By.ID, "username").click()
            self.driver.find_element(By.ID, "username").send_keys("teacher")
            self.driver.find_element(By.ID, "password").click()
            self.first_run = False
        self.driver.find_element(By.ID, "password").send_keys("moodle")
        self.driver.find_element(By.ID, "loginbtn").click()
        time.sleep(5)
    
    def logout(self):
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
        time.sleep(5)
        
    def testDoQuiz(self, question_1, question_2, question_3, question_4):
        try:
            self.precondition()
            self.driver.find_element(By.CSS_SELECTOR, ".searchbar input.form-control").send_keys("activity")
            time.sleep(5)
            self.driver.find_element(By.XPATH, "//div[1]/div/div/div/a/span[3]").click()
            self.driver.find_element(By.LINK_TEXT, "Quizzes").click()
            self.driver.find_element(By.XPATH, "//li[@id=\'module-703\']/div/div[2]/div/div/div/div/a").click()
            time.sleep(5)
            self.driver.find_element(By.XPATH, "//button[contains(.,\'Preview quiz\')]").click()
            time.sleep(5)
            
            self.driver.find_element(By.XPATH, "//span/input").click()
            self.driver.find_element(By.XPATH, "//span/input").send_keys(question_1['answer_1'])
            self.driver.find_element(By.XPATH, "//span[2]/input").click()
            self.driver.find_element(By.XPATH, "//span[2]/input").send_keys(question_1['answer_2'])
            self.driver.find_element(By.XPATH, "//span[3]/input").click()
            self.driver.find_element(By.XPATH, "//span[3]/input").send_keys(question_1['answer_3'])
            self.driver.find_element(By.XPATH, "//span[4]/input").click()
            self.driver.find_element(By.XPATH, "//span[4]/input").send_keys(question_1['answer_4'])
            
            self.driver.find_element(By.XPATH, "//div[2]/div[2]/div/p[2]/span/input").click()
            self.driver.find_element(By.XPATH, "//div[2]/div[2]/div/p[2]/span/input").send_keys(question_2['answer_1'])
            self.driver.find_element(By.XPATH, "//div[2]/div[2]/div/p[2]/span[2]/input").click()
            self.driver.find_element(By.XPATH, "//div[2]/div[2]/div/p[2]/span[2]/input").send_keys(question_2['answer_2'])
            self.driver.find_element(By.XPATH, "//div[2]/div[2]/div/p[2]/span[3]/input").click()
            self.driver.find_element(By.XPATH, "//div[2]/div[2]/div/p[2]/span[3]/input").send_keys(question_2['answer_3'])
        
            self.driver.find_element(By.XPATH, "//form/div/div[3]/div[2]/div").click()
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span/input").click()
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span/input").send_keys(question_3['answer_1'])
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span[2]/input").click()
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span[2]/input").send_keys(question_3['answer_2'])
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span[3]/input").click()
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span[3]/input").send_keys(question_3['answer_3'])
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span[4]/input").click()
            self.driver.find_element(By.XPATH, "//div[3]/div[2]/div/p[2]/span[4]/input").send_keys(question_3['answer_4'])
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span/input").click()
            
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span/input").send_keys(question_4['answer_1'])
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span[2]/input").click()
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span[2]/input").send_keys(question_4['answer_2'])
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span[3]/input").click()
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span[3]/input").send_keys(question_4['answer_3'])
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span[4]/input").click()
            self.driver.find_element(By.XPATH, "//div[4]/div[2]/div/p[2]/span[4]/input").send_keys(question_4['answer_4'])
            self.driver.find_element(By.XPATH, "//div[26]/input").click()
            time.sleep(3)
            self.driver.find_element(By.XPATH, "//div[5]/div/div/form/button").click()
            time.sleep(3)
            self.driver.find_element(By.XPATH, "//div[3]/button[2]").click()
            self.logout()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test(self, test_list: list):
        result = []
        for test in test_list:
            test_name = test['test_name']
            print(test_name)
            result.append(self.testDoQuiz(test['test_data']['question_1'], test['test_data']['question_2'], test['test_data']['question_3'], test['test_data']['question_4']))

        fail_test_names = [test['test_name'] for i, test in enumerate(test_list) if not result[i]]

        if fail_test_names:
            fail_test_name_str = 'FAILED:\n\t' + '\n\t'.join(fail_test_names)
        else:
            fail_test_name_str = 'Fail testcase: None'

        return f"""
        \n- Test Do Quiz (Level 1) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """
    
    def run(self):
        self.setup_method(None)
        result = self.test(data)
        self.teardown_method(None)
        return result
    
    
with open('./input_doQuiz.json', encoding='UTF-8') as f:
    data = json.load(f)
    test_data = [test_case['test_data'] for test_case in data]
    test_TestDoQuiz_DataDriven = TestDoQuiz(test_data)
    print(test_TestDoQuiz_DataDriven.run())
  
  


  
