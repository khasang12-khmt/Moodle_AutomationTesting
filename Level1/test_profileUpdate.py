# Generated by Selenium IDE
import time
import os
import json
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.support import expected_conditions as EC
current_directory = os.path.dirname(__file__)
JS_DROP_FILES = "var k=arguments,d=k[0],g=k[1],c=k[2],m=d.ownerDocument||document;for(var e=0;;){var f=d.getBoundingClientRect(),b=f.left+(g||(f.width/2)),a=f.top+(c||(f.height/2)),h=m.elementFromPoint(b,a);if(h&&d.contains(h)){break}if(++e>1){var j=new Error('Element not interactable');j.code=15;throw j}d.scrollIntoView({behavior:'instant',block:'center',inline:'center'})}var l=m.createElement('INPUT');l.setAttribute('type','file');l.setAttribute('multiple','');l.setAttribute('style','position:fixed;z-index:2147483647;left:0;top:0;');l.onchange=function(q){l.parentElement.removeChild(l);q.stopPropagation();var r={constructor:DataTransfer,effectAllowed:'all',dropEffect:'none',types:['Files'],files:l.files,setData:function u(){},getData:function o(){},clearData:function s(){},setDragImage:function i(){}};if(window.DataTransferItemList){r.items=Object.setPrototypeOf(Array.prototype.map.call(l.files,function(x){return{constructor:DataTransferItem,kind:'file',type:x.type,getAsFile:function v(){return x},getAsString:function y(A){var z=new FileReader();z.onload=function(B){A(B.target.result)};z.readAsText(x)},webkitGetAsEntry:function w(){return{constructor:FileSystemFileEntry,name:x.name,fullPath:'/'+x.name,isFile:true,isDirectory:false,file:function z(A){A(x)}}}}}),{constructor:DataTransferItemList,add:function t(){},clear:function p(){},remove:function n(){}})}['dragenter','dragover','drop'].forEach(function(v){var w=m.createEvent('DragEvent');w.initMouseEvent(v,true,true,m.defaultView,0,0,0,b,a,false,false,false,false,0,null);Object.setPrototypeOf(w,null);w.dataTransfer=r;Object.setPrototypeOf(w,DragEvent.prototype);h.dispatchEvent(w)})};m.documentElement.appendChild(l);l.getBoundingClientRect();return l"

def drop_files(element, files, offsetX=0, offsetY=0,wait=3):
    driver = element.parent
    isLocal = not driver._is_remote or '127.0.0.1' in driver.command_executor._url
    paths = []
    
    # ensure files are present, and upload to the remote server if session is remote
    for file in (files if isinstance(files, list) else [files]) :
        if not os.path.isfile(file) :
            raise FileNotFoundError(file)
        paths.append(file if isLocal else element._upload(file))
    
    value = '\n'.join(paths)
    elm_input = driver.execute_script(JS_DROP_FILES, element, offsetX, offsetY)
    elm_input._execute('sendKeysToElement', {'value': [value], 'text': value})
    
    time.sleep(3)


WebElement.drop_files = drop_files

class TestProfileUpdate():
  
    def setup_method(self, method):
        options = webdriver.ChromeOptions()
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        self.driver = webdriver.Chrome(options=options)
        self.vars = {}
  
    def teardown_method(self, method):
        self.driver.quit()
    
    def precondition(self):
        self.driver.get("https://sandbox.moodledemo.net/")
        self.driver.set_window_size(787, 816)
        self.driver.find_element(By.LINK_TEXT, "Log in").click()
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").clear()
        self.driver.find_element(By.ID, "username").send_keys("teacher")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("sandbox")
        self.driver.find_element(By.ID, "loginbtn").click()
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Profile").click()
        self.driver.find_element(By.LINK_TEXT, "Edit profile").click()

    def logout(self):
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
    
    
    def test_profile_edit(self, filename="./input/input_profileUpdate.json"):
        print("Test Update Profile")
        with open(filename, encoding='UTF-8') as f:
            testdata = json.load(f)
        result = []
        for testcase in testdata:
            result.append(self.test_profile_edit_case(testcase))
        fail_test_name = []
        for i in range(0, len(result)):
            if not result[i]:
                fail_test_name.append(testdata[i]["test_name"])
        fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
        print(f"""
        \n- Test Add User To Course (Level 1) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """)

    def test_profile_edit_case(self,testcase):
        testdata = testcase["test_data"]
        expected = testcase["expected"] if "expected" in testcase else None
        firstname = testdata["firstname"]
        lastname = testdata["lastname"]
        email = testdata["email"]

        try:
            self.precondition()
            try:
                self.driver.find_element(By.XPATH, "//a[text()='Cancel email change']").click()
            except NoSuchElementException:
                pass
            time.sleep(3)

            self.driver.find_element(By.ID, "id_firstname").click()
            self.driver.find_element(By.ID, "id_firstname").clear()
            self.driver.find_element(By.ID, "id_firstname").send_keys(firstname)

            self.driver.find_element(By.ID, "id_lastname").click()
            self.driver.find_element(By.ID, "id_lastname").clear()
            self.driver.find_element(By.ID, "id_lastname").send_keys(lastname)

            self.driver.find_element(By.ID, "id_email").click()
            self.driver.find_element(By.ID, "id_email").clear()
            self.driver.find_element(By.ID, "id_email").send_keys(email)

            if expected:
                # Check if the expected error message is present
                try:
                    if expected == "- Missing given name":
                        text = self.driver.find_element(By.XPATH, "//*[@id='id_error_firstname']").get_attribute("value")
                    elif expected == "- Missing last name":
                        text = self.driver.find_element(By.XPATH, "//*[@id='id_error_lastname']").get_attribute("value")      
                    elif expected == "- Required":
                        text = self.driver.find_element(By.XPATH, "//*[@id='id_error_email']").get_attribute("value")           
                    else:
                        text = expected
                    assert text != expected, False
                except NoSuchElementException:
                    raise Exception()
            self.driver.find_element(By.ID, "id_submitbutton").click()
            self.logout()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def test_EqClass_profileEdit(self, filename="./input/input_profileUpdateEqvClass.json"):
        print("Test Update Profile Eqv Class")
        with open(filename, encoding='UTF-8') as f:
            testdata = json.load(f)
        result = []
        for testcase in testdata:
            result.append(self.test_EqClass_profileEdit_case(testcase))
        fail_test_name = []
        for i in range(0, len(result)):
            if not result[i]:
                fail_test_name.append(testdata[i]["test_name"])
        fail_test_name_str = 'FAILED:\n\t'+ '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail testcase: None'
        print(f"""
        \n- Test Add User To Course (Level 1) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """)   
    
    def test_EqClass_profileEdit_case(self,testcase):
        try:
            testdata = testcase["test_data"]
            expected = testcase["expected"] if "expected" in testcase else None
            self.precondition()
            firstname = testdata["firstName"]
            lastname = testdata["lastName"]
            email = testdata["email"]
            imagePaths = testdata["imagePaths"]
            try:
                self.driver.find_element(By.XPATH, "//a[text()='Cancel email change']").click()
                time.sleep(3)
            except NoSuchElementException as err:
                pass
            self.driver.find_element(By.ID, "id_firstname").click()
            self.driver.find_element(By.ID, "id_firstname").clear()
            self.driver.find_element(By.ID, "id_firstname").send_keys(firstname)
            
            self.driver.find_element(By.ID, "id_lastname").click()
            self.driver.find_element(By.ID, "id_lastname").clear()
            self.driver.find_element(By.ID, "id_lastname").send_keys(lastname)

            self.driver.find_element(By.ID, "id_email").click()
            self.driver.find_element(By.ID, "id_email").clear()
            self.driver.find_element(By.ID, "id_email").send_keys(email)
            
            for idx,image in enumerate(imagePaths):
                wait = WebDriverWait(self.driver, 20)
                file_path = os.path.abspath(image)

                wait.until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, '.filemanager-container')))
                drop_target = self.driver.find_element(By.CSS_SELECTOR, '.filemanager-container')
                drop_target.drop_files(file_path)
                
                fileType = image.split('.')[-1]
                isValidFileType =  fileType in ["gif", "jpe", "jpeg", "jpg", "png"]

                try:
                    text = self.driver.find_element(By.CSS_SELECTOR, ".fp-msg-text").get_attribute('value')
                    assert text != expected, False
                    self.driver.find_element(By.CSS_SELECTOR, ".fp-msg-butok").click()    
                except:
                    if not isValidFileType:
                        assert True, False
            self.driver.find_element(By.ID, "id_submitbutton").click() 
            self.logout()
            return True
        except Exception as err:
            print(f"Unexpected {err=}, {type(err)=}")
            self.logout()
            return False
        
    def run(self):
        self.setup_method(None)
        # self.test_profile_edit()
        self.test_EqClass_profileEdit()
        self.teardown_method(None)
        
    
TestProfileUpdate().run()